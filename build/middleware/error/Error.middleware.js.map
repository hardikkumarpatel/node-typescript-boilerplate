{"version":3,"file":"Error.middleware.js","names":["_config","require","_helpers","_httpStatusCodes","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","ApiErrorHelperMiddleware","exports","default","err","_","res","__","message","name","error","stack","statusCode","StatusCodes","INTERNAL_SERVER_ERROR","errors","ApiErrorResponseHelper","Config","isDev","Log","response","status","json"],"sources":["../../../src/middleware/error/Error.middleware.ts"],"sourcesContent":["import { Config } from \"@/config\";\nimport { ApiErrorResponseHelper, Log } from \"@/helpers\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\n\nexport default class ApiErrorHelperMiddleware {\n  public static use = <T = string>(\n    err: ApiErrorResponseHelper<T>,\n    _: Request,\n    res: Response,\n    __: NextFunction\n  ) => {\n    const { message, name, error, stack } = err;\n    let { statusCode } = err;\n    if (!statusCode) {\n      statusCode = StatusCodes.INTERNAL_SERVER_ERROR;\n    }\n    const errors = new ApiErrorResponseHelper<NonNullable<T> | string>(\n      statusCode,\n      message,\n      error ?? name,\n      stack\n    );\n    if (Config.isDev()) {\n      Log.error<ApiErrorResponseHelper<NonNullable<T> | string>>(\"\", errors);\n    }\n    const response = {\n      ...errors,\n      ...(Config.isDev() ? { stack } : {})\n    };\n    return res.status(statusCode).json(response);\n  };\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAEA,IAAAE,gBAAA,GAAAF,OAAA;AAAgD,SAAAG,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAC,CAAA,GAAAH,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAK,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAN,CAAA,WAAAE,MAAA,CAAAK,wBAAA,CAAAR,CAAA,EAAAC,CAAA,EAAAQ,UAAA,OAAAP,CAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,CAAA,EAAAI,CAAA,YAAAJ,CAAA;AAAA,SAAAU,cAAAZ,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAY,SAAA,CAAAC,MAAA,EAAAb,CAAA,UAAAC,CAAA,WAAAW,SAAA,CAAAZ,CAAA,IAAAY,SAAA,CAAAZ,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAa,OAAA,WAAAd,CAAA,IAAAe,eAAA,CAAAhB,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAc,yBAAA,GAAAd,MAAA,CAAAe,gBAAA,CAAAlB,CAAA,EAAAG,MAAA,CAAAc,yBAAA,CAAAf,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAa,OAAA,WAAAd,CAAA,IAAAE,MAAA,CAAAgB,cAAA,CAAAnB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAK,wBAAA,CAAAN,CAAA,EAAAD,CAAA,iBAAAD,CAAA;AAAA,SAAAgB,gBAAAhB,CAAA,EAAAC,CAAA,EAAAC,CAAA,YAAAD,CAAA,GAAAmB,cAAA,CAAAnB,CAAA,MAAAD,CAAA,GAAAG,MAAA,CAAAgB,cAAA,CAAAnB,CAAA,EAAAC,CAAA,IAAAoB,KAAA,EAAAnB,CAAA,EAAAO,UAAA,MAAAa,YAAA,MAAAC,QAAA,UAAAvB,CAAA,CAAAC,CAAA,IAAAC,CAAA,EAAAF,CAAA;AAAA,SAAAoB,eAAAlB,CAAA,QAAAsB,CAAA,GAAAC,YAAA,CAAAvB,CAAA,uCAAAsB,CAAA,GAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAC,aAAAvB,CAAA,EAAAD,CAAA,2BAAAC,CAAA,KAAAA,CAAA,SAAAA,CAAA,MAAAF,CAAA,GAAAE,CAAA,CAAAwB,MAAA,CAAAC,WAAA,kBAAA3B,CAAA,QAAAwB,CAAA,GAAAxB,CAAA,CAAA4B,IAAA,CAAA1B,CAAA,EAAAD,CAAA,uCAAAuB,CAAA,SAAAA,CAAA,YAAAK,SAAA,yEAAA5B,CAAA,GAAA6B,MAAA,GAAAC,MAAA,EAAA7B,CAAA;AAEjC,MAAM8B,wBAAwB,CAAC;AA2B7CC,OAAA,CAAAC,OAAA,GAAAF,wBAAA;AAAAhB,eAAA,CA3BoBgB,wBAAwB,SACvB,CAClBG,GAA8B,EAC9BC,CAAU,EACVC,GAAa,EACbC,EAAgB,KACb;EACH,IAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGP,GAAG;EAC3C,IAAI;IAAEQ;EAAW,CAAC,GAAGR,GAAG;EACxB,IAAI,CAACQ,UAAU,EAAE;IACfA,UAAU,GAAGC,4BAAW,CAACC,qBAAqB;EAChD;EACA,IAAMC,MAAM,GAAG,IAAIC,+BAAsB,CACvCJ,UAAU,EACVJ,OAAO,EACPE,KAAK,aAALA,KAAK,cAALA,KAAK,GAAID,IAAI,EACbE,KACF,CAAC;EACD,IAAIM,cAAM,CAACC,KAAK,CAAC,CAAC,EAAE;IAClBC,YAAG,CAACT,KAAK,CAAkD,EAAE,EAAEK,MAAM,CAAC;EACxE;EACA,IAAMK,QAAQ,GAAAvC,aAAA,CAAAA,aAAA,KACTkC,MAAM,GACLE,cAAM,CAACC,KAAK,CAAC,CAAC,GAAG;IAAEP;EAAM,CAAC,GAAG,CAAC,CAAC,CACpC;EACD,OAAOL,GAAG,CAACe,MAAM,CAACT,UAAU,CAAC,CAACU,IAAI,CAACF,QAAQ,CAAC;AAC9C,CAAC","ignoreList":[]}